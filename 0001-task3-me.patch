From cba095f4dead768b0a41e7989d82cdd19bd6a6ec Mon Sep 17 00:00:00 2001
From: ntaka19 <naruakitakano@gmail.com>
Date: Mon, 29 Jan 2024 17:09:36 +0900
Subject: [PATCH] task3(me)

---
 0001-first.patch            | 137 +++++++++++++++++
 src/DataManipulator.ts      |  40 +++++
 src/DataStreamer.ts         |   4 +-
 src/Graph.tsx               |  72 ++++-----
 task2.patch                 | 288 ++++++++++++++++++++++++++++++++++++
 task2.patch:Zone.Identifier |   4 +
 task3.patch                 | 176 ++++++++++++++++++++++
 task3.patch:Zone.Identifier |   4 +
 8 files changed, 680 insertions(+), 45 deletions(-)
 create mode 100644 0001-first.patch
 create mode 100644 src/DataManipulator.ts
 create mode 100644 task2.patch
 create mode 100644 task2.patch:Zone.Identifier
 create mode 100644 task3.patch
 create mode 100644 task3.patch:Zone.Identifier

diff --git a/0001-first.patch b/0001-first.patch
new file mode 100644
index 0000000..a5168a0
--- /dev/null
+++ b/0001-first.patch
@@ -0,0 +1,137 @@
+From 9ae08c92a1a2b229224e8e811be59fd342ec7f2d Mon Sep 17 00:00:00 2001
+From: ntaka19 <naruakitakano@gmail.com>
+Date: Sun, 28 Jan 2024 22:45:38 +0900
+Subject: [PATCH] first
+
+---
+ 0001-Move-python-files-to-datafeed-dir.patch | 28 ++++++++++++++++++++
+ src/App.tsx                                  | 23 ++++++++++++++--
+ src/Graph.tsx                                | 12 ++++++++-
+ 3 files changed, 60 insertions(+), 3 deletions(-)
+ create mode 100644 0001-Move-python-files-to-datafeed-dir.patch
+
+diff --git a/0001-Move-python-files-to-datafeed-dir.patch b/0001-Move-python-files-to-datafeed-dir.patch
+new file mode 100644
+index 0000000..68c66c0
+--- /dev/null
++++ b/0001-Move-python-files-to-datafeed-dir.patch
+@@ -0,0 +1,28 @@
++From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
++From: Joe Ferrer <joe@theforage.com>
++Date: Wed, 1 Mar 2023 00:45:20 +1100
++Subject: [PATCH] Move python files to datafeed dir
++
++---
++ requirements.txt => datafeed/requirements.txt | 0
++ server.py => datafeed/server3.py              | 0
++ datafeed/test.csv                             | 0
++ 3 files changed, 0 insertions(+), 0 deletions(-)
++ rename requirements.txt => datafeed/requirements.txt (100%)
++ rename server.py => datafeed/server3.py (100%)
++ create mode 100644 datafeed/test.csv
++
++diff --git a/requirements.txt b/datafeed/requirements.txt
++similarity index 100%
++rename from requirements.txt
++rename to datafeed/requirements.txt
++diff --git a/server.py b/datafeed/server3.py
++similarity index 100%
++rename from server.py
++rename to datafeed/server3.py
++diff --git a/datafeed/test.csv b/datafeed/test.csv
++new file mode 100644
++index 0000000..e69de29
++-- 
++2.25.1
++
+diff --git a/src/App.tsx b/src/App.tsx
+index 0728518..f482b17 100755
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -8,6 +8,7 @@ import './App.css';
+  */
+ interface IState {
+   data: ServerRespond[],
++  showGraph: boolean,
+ }
+ 
+ /**
+@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
+       // data saves the server responds.
+       // We use this state to parse data down to the child element (Graph) as element property
+       data: [],
++      showGraph: false,
+     };
+   }
+ 
+@@ -29,18 +31,35 @@ class App extends Component<{}, IState> {
+    * Render Graph react component with state.data parse as property data
+    */
+   renderGraph() {
+-    return (<Graph data={this.state.data}/>)
++    if (this.state.showGraph){
++      return (<Graph data={this.state.data}/>)
++    }
++    //return (<Graph data={this.state.data}/>)
+   }
+ 
+   /**
+    * Get new data from server and update the state with the new data
+    */
+   getDataFromServer() {
++    let x = 0;
++    const interval = setInterval(() => {
++      DataStreamer.getData((serverResponds: ServerRespond[]) => {
++        this.setState({
++          data: serverResponds,
++          showGraph: true,
++        });
++      });
++      x++;
++      if (x > 1000){
++        clearInterval(interval);
++      }
++    }, 100);
++    /*
+     DataStreamer.getData((serverResponds: ServerRespond[]) => {
+       // Update the state by creating a new array of data that consists of
+       // Previous data in the state and the new data from server
+       this.setState({ data: [...this.state.data, ...serverResponds] });
+-    });
++    });*/
+   }
+ 
+   /**
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index 3b2a7da..b74e35a 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -14,7 +14,7 @@ interface IProps {
+  * Perspective library adds load to HTMLElement prototype.
+  * This interface acts as a wrapper for Typescript compiler.
+  */
+-interface PerspectiveViewerElement {
++interface PerspectiveViewerElement extends HTMLElement {
+   load: (table: Table) => void,
+ }
+ 
+@@ -34,6 +34,16 @@ class Graph extends Component<IProps, {}> {
+     // Get element to attach the table from the DOM.
+     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
++    elem.setAttribute('view', 'y_line');
++    elem.setAttribute('column-pivots', '["stock"]');
++    elem.setAttribute('row-pivots', '["timestamp"]');
++    elem.setAttribute('columns', '["top_ask_price"]');
++    elem.setAttribute('aggregates',
++     '{"stock":"distinct count",\
++      "top_ask_price": "avg",\
++      "top_bid_price": "avg",\
++      "timestamp":"distinct count"}');
++    
+     const schema = {
+       stock: 'string',
+       top_ask_price: 'float',
+-- 
+2.25.1
+
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
new file mode 100644
index 0000000..7bf194c
--- /dev/null
+++ b/src/DataManipulator.ts
@@ -0,0 +1,40 @@
+import { ServerRespond } from './DataStreamer';
+
+export interface Row {
+  price_abc: number,
+  price_def: number,
+  ratio: number,
+  timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
+}
+
+
+export class DataManipulator {
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2 ; 
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2 ;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+
+    return {
+      price_abc : priceABC, 
+      price_def : priceDEF,
+      ratio,
+      timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ? serverRespond[0].timestamp : serverRespond[1].timestamp,
+      upper_bound: upperBound,
+      lower_bound: lowerBound,
+      trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
+    };
+    /*
+    return serverResponds.map((el: any) => {
+      return {
+        stock: el.stock,
+        top_ask_price: el.top_ask && el.top_ask.price || 0,
+        timestamp: el.timestamp,
+      };
+    })*/
+  }
+}
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..61a850c 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -1,6 +1,6 @@
 export interface Order {
-  price: Number,
-  size: Number,
+  price: number,
+  size: number,
 }
 /**
  * The datafeed server returns an array of ServerRespond with 2 stocks.
diff --git a/src/Graph.tsx b/src/Graph.tsx
index b74e35a..7bec582 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,29 +1,17 @@
 import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
+import { Table, TableData } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
+import { DataManipulator } from './DataManipulator';
 import './Graph.css';
 
-/**
- * Props declaration for <Graph />
- */
 interface IProps {
   data: ServerRespond[],
 }
 
-/**
- * Perspective library adds load to HTMLElement prototype.
- * This interface acts as a wrapper for Typescript compiler.
- */
 interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
-
-/**
- * React component that renders Perspective based on data
- * parsed from its parent through data property.
- */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
   table: Table | undefined;
 
   render() {
@@ -31,51 +19,49 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
-    elem.setAttribute('view', 'y_line');
-    elem.setAttribute('column-pivots', '["stock"]');
-    elem.setAttribute('row-pivots', '["timestamp"]');
-    elem.setAttribute('columns', '["top_ask_price"]');
-    elem.setAttribute('aggregates',
-     '{"stock":"distinct count",\
-      "top_ask_price": "avg",\
-      "top_bid_price": "avg",\
-      "timestamp":"distinct count"}');
+    // Get element from the DOM.
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float'
     };
 
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
+
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
-      // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
+      elem.setAttribute('aggregates', JSON.stringify({
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
+        timestamp: 'disctinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
+      }));
     }
   }
 
   componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      /*
+      this.table.update(
+        DataManipulator.generateRow(this.props.data),
+      );*/
+      this.table.update([
+        DataManipulator.generateRow(this.props.data), ] as unknown as TableData);
     }
   }
 }
diff --git a/task2.patch b/task2.patch
new file mode 100644
index 0000000..ef2828f
--- /dev/null
+++ b/task2.patch
@@ -0,0 +1,288 @@
+From 4cd4d9429ba77c1c402060ee8dbac8124dd1e8bb Mon Sep 17 00:00:00 2001
+From: Josiah Chapman <josiah.chapman@gmail.com>
+Date: Tue, 2 Aug 2022 22:24:54 -0700
+Subject: [PATCH] model answer
+
+---
+ src/App.tsx   | 121 ++++++++++++++++++++++++++++----------------------
+ src/Graph.tsx |  93 ++++++++++++++++++++------------------
+ 2 files changed, 118 insertions(+), 96 deletions(-)
+
+diff --git a/src/App.tsx b/src/App.tsx
+index 0728518..94b8cf3 100755
+--- a/src/App.tsx
++++ b/src/App.tsx
+@@ -1,13 +1,15 @@
+-import React, { Component } from 'react';
+-import DataStreamer, { ServerRespond } from './DataStreamer';
++import React, {Component} from 'react';
++import DataStreamer, {ServerRespond} from './DataStreamer';
+ import Graph from './Graph';
+ import './App.css';
++import {setInterval} from "timers";
+ 
+ /**
+  * State declaration for <App />
+  */
+ interface IState {
+-  data: ServerRespond[],
++    data: ServerRespond[],
++    showGraph: boolean
+ }
+ 
+ /**
+@@ -15,60 +17,73 @@ interface IState {
+  * It renders title, button and Graph react element.
+  */
+ class App extends Component<{}, IState> {
+-  constructor(props: {}) {
+-    super(props);
++    constructor(props: {}) {
++        super(props);
+ 
+-    this.state = {
+-      // data saves the server responds.
+-      // We use this state to parse data down to the child element (Graph) as element property
+-      data: [],
+-    };
+-  }
++        this.state = {
++            // data saves the server responds.
++            // We use this state to parse data down to the child element (Graph) as element property
++            data: [],
++            showGraph: false
++        };
++    }
+ 
+-  /**
+-   * Render Graph react component with state.data parse as property data
+-   */
+-  renderGraph() {
+-    return (<Graph data={this.state.data}/>)
+-  }
++    /**
++     * Render Graph react component with state.data parse as property data
++     */
++    renderGraph() {
++        if (this.state.showGraph) {
++            return (<Graph data={this.state.data}/>)
++        }
++    }
+ 
+-  /**
+-   * Get new data from server and update the state with the new data
+-   */
+-  getDataFromServer() {
+-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+-      // Update the state by creating a new array of data that consists of
+-      // Previous data in the state and the new data from server
+-      this.setState({ data: [...this.state.data, ...serverResponds] });
+-    });
+-  }
++    /**
++     * Get new data from server and update the state with the new data
++     */
++    getDataFromServer() {
++        let x = 0;
++        const interval = setInterval(() => {
++            DataStreamer.getData((serverResponds: ServerRespond[]) => {
++                this.setState({
++                    data: serverResponds,
++                    showGraph: true
++                });
++            });
++            x++;
++            if (x > 1000) {
++                clearInterval(interval);
++            }
++        }, 100);
++    }
+ 
+-  /**
+-   * Render the App react component
+-   */
+-  render() {
+-    return (
+-      <div className="App">
+-        <header className="App-header">
+-          Bank & Merge Co Task 2
+-        </header>
+-        <div className="App-content">
+-          <button className="btn btn-primary Stream-button"
+-            // when button is click, our react app tries to request
+-            // new data from the server.
+-            // As part of your task, update the getDataFromServer() function
+-            // to keep requesting the data every 100ms until the app is closed
+-            // or the server does not return anymore data.
+-            onClick={() => {this.getDataFromServer()}}>
+-            Start Streaming Data
+-          </button>
+-          <div className="Graph">
+-            {this.renderGraph()}
+-          </div>
+-        </div>
+-      </div>
+-    )
+-  }
++    /**
++     * Render the App react component
++     */
++    render() {
++        return (
++            <div className="App">
++                <header className="App-header">
++                    Bank & Merge Co Task 2
++                </header>
++                <div className="App-content">
++                    <button className="btn btn-primary Stream-button"
++                        // when button is click, our react app tries to request
++                        // new data from the server.
++                        // As part of your task, update the getDataFromServer() function
++                        // to keep requesting the data every 100ms until the app is closed
++                        // or the server does not return anymore data.
++                            onClick={() => {
++                                this.getDataFromServer()
++                            }}>
++                        Start Streaming Data
++                    </button>
++                    <div className="Graph">
++                        {this.renderGraph()}
++                    </div>
++                </div>
++            </div>
++        )
++    }
+ }
+ 
+ export default App;
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index 3b2a7da..2b0cb17 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -1,21 +1,21 @@
+-import React, { Component } from 'react';
+-import { Table } from '@finos/perspective';
+-import { ServerRespond } from './DataStreamer';
++import React, {Component} from 'react';
++import {Table} from '@finos/perspective';
++import {ServerRespond} from './DataStreamer';
+ import './Graph.css';
+ 
+ /**
+  * Props declaration for <Graph />
+  */
+ interface IProps {
+-  data: ServerRespond[],
++    data: ServerRespond[],
+ }
+ 
+ /**
+  * Perspective library adds load to HTMLElement prototype.
+  * This interface acts as a wrapper for Typescript compiler.
+  */
+-interface PerspectiveViewerElement {
+-  load: (table: Table) => void,
++interface PerspectiveViewerElement extends HTMLElement {
++    load: (table: Table) => void,
+ }
+ 
+ /**
+@@ -23,51 +23,58 @@ interface PerspectiveViewerElement {
+  * parsed from its parent through data property.
+  */
+ class Graph extends Component<IProps, {}> {
+-  // Perspective table
+-  table: Table | undefined;
++    // Perspective table
++    table: Table | undefined;
+ 
+-  render() {
+-    return React.createElement('perspective-viewer');
+-  }
++    render() {
++        return React.createElement('perspective-viewer');
++    }
+ 
+-  componentDidMount() {
+-    // Get element to attach the table from the DOM.
+-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++    componentDidMount() {
++        // Get element to attach the table from the DOM.
++        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
+-    const schema = {
+-      stock: 'string',
+-      top_ask_price: 'float',
+-      top_bid_price: 'float',
+-      timestamp: 'date',
+-    };
++        const schema = {
++            stock: 'string',
++            top_ask_price: 'float',
++            top_bid_price: 'float',
++            timestamp: 'date',
++        };
+ 
+-    if (window.perspective && window.perspective.worker()) {
+-      this.table = window.perspective.worker().table(schema);
+-    }
+-    if (this.table) {
+-      // Load the `table` in the `<perspective-viewer>` DOM reference.
++        if (window.perspective && window.perspective.worker()) {
++            this.table = window.perspective.worker().table(schema);
++        }
++        if (this.table) {
++            // Load the `table` in the `<perspective-viewer>` DOM reference.
+ 
+-      // Add more Perspective configurations here.
+-      elem.load(this.table);
++            // Add more Perspective configurations here.
++            elem.load(this.table);
++            elem.setAttribute("view", "y_line");
++            elem.setAttribute("column-pivots", '["stock"]');
++            elem.setAttribute("row_pivots", '["timestamp"]');
++            elem.setAttribute("columns", '["top_ask_price"]');
++            elem.setAttribute("aggregates",
++                '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
++            );
++        }
+     }
+-  }
+ 
+-  componentDidUpdate() {
+-    // Everytime the data props is updated, insert the data into Perspective table
+-    if (this.table) {
+-      // As part of the task, you need to fix the way we update the data props to
+-      // avoid inserting duplicated entries into Perspective table again.
+-      this.table.update(this.props.data.map((el: any) => {
+-        // Format the data from ServerRespond to the schema
+-        return {
+-          stock: el.stock,
+-          top_ask_price: el.top_ask && el.top_ask.price || 0,
+-          top_bid_price: el.top_bid && el.top_bid.price || 0,
+-          timestamp: el.timestamp,
+-        };
+-      }));
++    componentDidUpdate() {
++        // Everytime the data props is updated, insert the data into Perspective table
++        if (this.table) {
++            // As part of the task, you need to fix the way we update the data props to
++            // avoid inserting duplicated entries into Perspective table again.
++            this.table.update(this.props.data.map((el: any) => {
++                // Format the data from ServerRespond to the schema
++                return {
++                    stock: el.stock,
++                    top_ask_price: el.top_ask && el.top_ask.price || 0,
++                    top_bid_price: el.top_bid && el.top_bid.price || 0,
++                    timestamp: el.timestamp,
++                };
++            }));
++        }
+     }
+-  }
+ }
+ 
+ export default Graph;
+-- 
+2.34.1
+
diff --git a/task2.patch:Zone.Identifier b/task2.patch:Zone.Identifier
new file mode 100644
index 0000000..52c20b8
--- /dev/null
+++ b/task2.patch:Zone.Identifier
@@ -0,0 +1,4 @@
+[ZoneTransfer]
+ZoneId=3
+ReferrerUrl=https://www.theforage.com/
+HostUrl=https://cdn.theforage.com/vinternships/companyassets/Sj7temL583QAYpHXD/JiwEkbBq8pFwMRYLc/1678221908472/task2.patch
diff --git a/task3.patch b/task3.patch
new file mode 100644
index 0000000..4f20537
--- /dev/null
+++ b/task3.patch
@@ -0,0 +1,176 @@
+From 9d7b8d2a9c025a8c7490338ce318c09ca8b051e7 Mon Sep 17 00:00:00 2001
+From: Josiah Chapman <josiah.chapman@gmail.com>
+Date: Tue, 2 Aug 2022 23:51:44 -0700
+Subject: [PATCH] model answer
+
+---
+ src/DataManipulator.ts | 38 ++++++++++++------
+ src/Graph.tsx          | 90 ++++++++++++++++++++++--------------------
+ 2 files changed, 73 insertions(+), 55 deletions(-)
+
+diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
+index 7f62295..b0c2c78 100644
+--- a/src/DataManipulator.ts
++++ b/src/DataManipulator.ts
+@@ -1,20 +1,32 @@
+-import { ServerRespond } from './DataStreamer';
++import {ServerRespond} from './DataStreamer';
+ 
+ export interface Row {
+-  stock: string,
+-  top_ask_price: number,
+-  timestamp: Date,
++    price_abc: number,
++    price_def: number,
++    ratio: number,
++    timestamp: Date,
++    upper_bound: number,
++    lower_bound: number,
++    trigger_alert: number | undefined,
+ }
+ 
+ 
+ export class DataManipulator {
+-  static generateRow(serverResponds: ServerRespond[]) {
+-    return serverResponds.map((el: any) => {
+-      return {
+-        stock: el.stock,
+-        top_ask_price: el.top_ask && el.top_ask.price || 0,
+-        timestamp: el.timestamp,
+-      };
+-    })
+-  }
++    static generateRow(serverRespond: ServerRespond[]): Row {
++        const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
++        const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
++        const ratio = priceABC / priceDEF;
++        const upperBound = 1 + 0.05;
++        const lowerBound = 1 - 0.05;
++        return {
++            price_abc: priceABC,
++            price_def: priceDEF,
++            ratio,
++            timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
++                serverRespond[0].timestamp : serverRespond[1].timestamp,
++            upper_bound: upperBound,
++            lower_bound: lowerBound,
++            trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
++        };
++    }
+ }
+diff --git a/src/Graph.tsx b/src/Graph.tsx
+index 277797d..02964a5 100644
+--- a/src/Graph.tsx
++++ b/src/Graph.tsx
+@@ -1,60 +1,66 @@
+-import React, { Component } from 'react';
+-import { Table } from '@finos/perspective';
+-import { ServerRespond } from './DataStreamer';
+-import { DataManipulator } from './DataManipulator';
++import React, {Component} from 'react';
++import {Table, TableData} from '@finos/perspective';
++import {ServerRespond} from './DataStreamer';
++import {DataManipulator} from './DataManipulator';
+ import './Graph.css';
+ 
+ interface IProps {
+-  data: ServerRespond[],
++    data: ServerRespond[],
+ }
+ 
+ interface PerspectiveViewerElement extends HTMLElement {
+-  load: (table: Table) => void,
++    load: (table: Table) => void,
+ }
++
+ class Graph extends Component<IProps, {}> {
+-  table: Table | undefined;
++    table: Table | undefined;
+ 
+-  render() {
+-    return React.createElement('perspective-viewer');
+-  }
++    render() {
++        return React.createElement('perspective-viewer');
++    }
+ 
+-  componentDidMount() {
+-    // Get element from the DOM.
+-    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
++    componentDidMount() {
++        // Get element from the DOM.
++        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+ 
+-    const schema = {
+-      stock: 'string',
+-      top_ask_price: 'float',
+-      top_bid_price: 'float',
+-      timestamp: 'date',
+-    };
++        const schema = {
++            price_abc: 'float',
++            price_def: 'float',
++            ratio: 'float',
++            timestamp: 'date',
++            upper_bound: 'float',
++            lower_bound: 'float',
++            trigger_alert: 'float'
++        };
+ 
+-    if (window.perspective && window.perspective.worker()) {
+-      this.table = window.perspective.worker().table(schema);
+-    }
+-    if (this.table) {
+-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+-      elem.load(this.table);
+-      elem.setAttribute('view', 'y_line');
+-      elem.setAttribute('column-pivots', '["stock"]');
+-      elem.setAttribute('row-pivots', '["timestamp"]');
+-      elem.setAttribute('columns', '["top_ask_price"]');
+-      elem.setAttribute('aggregates', JSON.stringify({
+-        stock: 'distinctcount',
+-        top_ask_price: 'avg',
+-        top_bid_price: 'avg',
+-        timestamp: 'distinct count',
+-      }));
++        if (window.perspective && window.perspective.worker()) {
++            this.table = window.perspective.worker().table(schema);
++        }
++        if (this.table) {
++            // Load the `table` in the `<perspective-viewer>` DOM reference.
++            elem.load(this.table);
++            elem.setAttribute('view', 'y_line');
++            elem.setAttribute('row-pivots', '["timestamp"]');
++            elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
++            elem.setAttribute('aggregates', JSON.stringify({
++                price_abc: 'avg',
++                price_def: 'avg',
++                ratio: 'avg',
++                timestamp: 'distinct count',
++                upper_bound: 'avg',
++                lower_bound: 'avg',
++                trigger_alert: 'avg'
++            }));
++        }
+     }
+-  }
+ 
+-  componentDidUpdate() {
+-    if (this.table) {
+-      this.table.update(
+-        DataManipulator.generateRow(this.props.data),
+-      );
++    componentDidUpdate() {
++        if (this.table) {
++            this.table.update([
++                DataManipulator.generateRow(this.props.data),
++            ] as unknown as TableData);
++        }
+     }
+-  }
+ }
+ 
+ export default Graph;
+-- 
+2.34.1
+
diff --git a/task3.patch:Zone.Identifier b/task3.patch:Zone.Identifier
new file mode 100644
index 0000000..3721562
--- /dev/null
+++ b/task3.patch:Zone.Identifier
@@ -0,0 +1,4 @@
+[ZoneTransfer]
+ZoneId=3
+ReferrerUrl=https://www.theforage.com/
+HostUrl=https://cdn.theforage.com/vinternships/companyassets/Sj7temL583QAYpHXD/JiwEkbBq8pFwMRYLc/1678222290502/task3.patch
-- 
2.25.1

